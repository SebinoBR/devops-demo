name: CI/CD Pipeline

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      # Cache Maven dependencies
      - name: Cache Maven packages
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'adopt'
          
      - name: Build and test backend
        run: |
          cd devops-demo
          mvn clean package
      
      # Cache Node modules
      - name: Cache Node.js modules
        uses: actions/cache@v3
        with:
          path: frontend/node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('frontend/package-lock.json') }}
          restore-keys: ${{ runner.os }}-node-
      
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'
          
      - name: Build and test frontend
        run: |
          cd devops-demo
          npm ci
          npm run build
          npm test -- --watchAll=false
  
  build-docker-images:
    needs: build-and-test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      - name: Build backend Docker image
        uses: docker/build-push-action@v3
        with:
          context: ./backend
          push: false
          load: true
          tags: devops-demo:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      - name: Build frontend Docker image
        uses: docker/build-push-action@v3
        with:
          context: ./frontend
          push: false
          load: true
          tags: viatab-frontend:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      - name: Save Docker images
        run: |
          mkdir -p docker-images
          docker save devops-demo:latest > docker-images/backend.tar
          docker save viatab-frontend:latest > docker-images/frontend.tar
      
      - name: Upload Docker images
        uses: actions/upload-artifact@v3
        with:
          name: docker-images
          path: docker-images
  
  deploy-to-kubernetes:
    needs: build-docker-images
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Download Docker images
        uses: actions/download-artifact@v3
        with:
          name: docker-images
          path: docker-images
      
      - name: Load Docker images
        run: |
          docker load < docker-images/backend.tar
          docker load < docker-images/frontend.tar
      
      - name: Start Minikube
        uses: medyagh/setup-minikube@latest
      
      - name: Load images into Minikube
        run: |
          eval $(minikube -p minikube docker-env)
          minikube image load devops-demo:latest
          minikube image load viatab-frontend:latest
      
      - name: Deploy to Kubernetes
        run: |
          kubectl apply -f k8s/configmap.yaml
          kubectl apply -f k8s/db-pv.yaml
          kubectl apply -f k8s/db-pvc.yaml
          kubectl apply -f k8s/postgres-deployment.yaml
          kubectl apply -f k8s/postgres-service.yaml
          kubectl apply -f k8s/backend-deployment.yaml
          kubectl apply -f k8s/backend-service.yaml
          kubectl apply -f k8s/frontend-deployment.yaml
          kubectl apply -f k8s/frontend-service.yaml
      
      - name: Verify deployment
        run: |
          kubectl get pods
          kubectl get services
          kubectl get deployments
      
      - name: Wait for deployments to be ready
        run: |
          kubectl wait --for=condition=available --timeout=300s deployment/postgres-db
          kubectl wait --for=condition=available --timeout=300s deployment/backend
          kubectl wait --for=condition=available --timeout=300s deployment/frontend
      
      - name: Get service URLs
        run: |
          minikube service frontend-service --url
          minikube service backend-service --url
